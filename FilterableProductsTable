<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>default</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>
  <body>
    <div id="app"></div>
    <script type="text/babel">
      class SearchBar extends React.Component {
        constructor(props) {
          super(props);
          this.onFilterTextChange = this.onFilterTextChange.bind(this);
          this.onInStockOnlyChange = this.onInStockOnlyChange.bind(this);
        }
        onFilterTextChange(e) {
          this.props.onFilterTextChange(e.target.value);
        }
        onInStockOnlyChange(e) {
          this.props.onInStockOnlyChange(e.target.checked);
        }

        render() {
          return (
            <form>
              <input
                type="text"
                placeholder="Search.."
                onChange={this.onFilterTextChange}
                />
              <p><input
                   type="checkbox"
                   onChange={this.onInStockOnlyChange}
                   />{' '}Only show products in stock</p>
            </form>

          );
        }
      }



      class ProductTable extends React.Component {
        render() {
          const filterText = this.props.filterText;
          const inStockOnly = this.props.inStockOnly;
          const rows = [];
          let lastCategory = null;
          this.props.products.forEach( (product) => {
            let xName = product.name.toLowerCase();
            if (xName.indexOf(filterText.toLowerCase()) === -1) {
              return;
            }
            if (inStockOnly && !product.stocked) {
              return;
            }

            //category 
            let name = product.stocked ?
                       product.name :
                       <span style={{color: 'pink'}}>
                         {product.name}
                       </span>;
            if (product.category != lastCategory) {
              rows.push(
                <tr key={product.category}>
                  <th>{product.category}</th>
                </tr>
              );
              lastCategory = product.category;
            }


            //products
            rows.push(
              <tr key={product.name}>
                <td>{name}</td>
                <td>{product.price}</td>
              </tr>
            );
           });

          return (
            <table>
              <tbody>{rows}</tbody>
            </table>

          );
        }
      }


      class FilterableProductsTable extends React.Component {
        constructor(props){
          super(props);
          this.state = {
            filterText: '',
            inStockOnly: false,
          };
          this.onFilterTextChange = this.onFilterTextChange.bind(this);
          this.onInStockOnlyChange = this.onInStockOnlyChange.bind(this);
        }
        onFilterTextChange(filter) {
          this.setState({
            filterText: filter,
          });
        }
        onInStockOnlyChange(turn) {
          this.setState({
            inStockOnly: turn,
          });
          //alert(turn);
        }

        render() {
          return (
            <div>
              <SearchBar
                filterText={this.state.filterText}
                inStockOnly={this.state.inStockOnly}
                onFilterTextChange={this.onFilterTextChange}
                onInStockOnlyChange={this.onInStockOnlyChange}
                />
              <ProductTable 
                products={this.props.products}
                filterText={this.state.filterText}
                inStockOnly={this.state.inStockOnly}
                />
            </div>

          );
        }
      }






      const PRODUCTS = [
        {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},
        {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},
        {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},
        {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},
        {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},
        {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}
      ];

      ReactDOM.render(
        <FilterableProductsTable products={PRODUCTS} />,
        document.getElementById('app')
      );

    </script>
    <!--
      Note: this page is a great way to try React but it's not suitable for production.
      It slowly compiles JSX with Babel in the browser and uses a large development build of React.

      Read this section for a production-ready setup with JSX:
      https://reactjs.org/docs/add-react-to-a-website.html#add-jsx-to-a-project

      In a larger project, you can use an integrated toolchain that includes JSX instead:
      https://reactjs.org/docs/create-a-new-react-app.html

      You can also use React without JSX, in which case you can remove Babel:
      https://reactjs.org/docs/react-without-jsx.html
    -->
  </body>
</html>
